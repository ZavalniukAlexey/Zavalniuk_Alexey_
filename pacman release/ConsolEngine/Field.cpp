#include "Field.h"
#include "Consts.h"


Field::Field()
{
	/*char f[37][31] = {
"++++++++++++++++++++++++++++++",
"+   Score:                   +",
"+                            +",
"+############################+",
"+#............##............#+",
"+#.####.#####.##.#####.####.#+",
"+#.####.#####.##.#####.####.#+",
"+#.####.#####.##.#####.####.#+",
"+#..........................#+",
"+#.####.##.########.##.####.#+",
"+#.####.##.########.##.####.#+",
"+#......##....##....##......#+",
"+######.#####.##.#####.######+",
"+######.#####.##.#####.######+",
"+######.##          ##.######+",
"+######.## ######## ## ######+",
"+######.## #      # ##.######+",
"+      .   #      #   .      +",
"+######.## #      # ##.######+",
"+######.## ######## ##.######+",
"+######.##          ##.######+",
"+######.##.########.##.######+",
"+######.##.########.##.######+",
"+#............##............#+",
"+#.####.#####.##.#####.####.#+",
"+#.####.#####.##.#####.####.#+",
"+#...##................##...#+",
"+###.##.##.########.##.##.###+",
"+###.##.##.########.##.##.###+",
"+#......##....##....##......#+",
"+#.##########.##.##########.#+",
"+#.##########.##.##########.#+",
"+#..........................#+",
"+############################+",
"+   Lives left:              +",
"+                            +",
"++++++++++++++++++++++++++++++"
	};
	for (int i = 0; i < setFieldY(); i++)
		for (int j = 0; j < setFieldX(); j++)
			field[i][j] = f[i][j];*/
}


void Field::setFieldChar(const int x, const int y, const char c)
{
	field[x][y] = c;
}

char Field::getFieldChar(const  int i, const int j)
{
	return field[i][j];
}

void Field::resetField()
{
	char f[38][31] = {
"++++++++++++++++++++++++++++++",
"+   Score:                   +",
"+   Level:                   +",
"+############################+",
"+#............##............#+",
"+#.####.#####.##.#####.####.#+",
"+#.####.#####.##.#####.####.#+",
"+#.####.#####.##.#####.####.#+",
"+#..........................#+",
"+#.####.##.########.##.####.#+",
"+#.####.##.########.##.####.#+",
"+#......##....##....##......#+",
"+######.#####.##.#####.######+",
"+######.#####.##.#####.######+",
"+######.##          ##.######+",
"+######.## ######## ##.######+",
"+######.## #      # ##.######+",
"+      .   #      #   .      +",
"+######.## #      # ##.######+",
"+######.## ######## ##.######+",
"+######.##          ##.######+",
"+######.##.########.##.######+",
"+######.##.########.##.######+",
"+#............##............#+",
"+#.####.#####.##.#####.####.#+",
"+#.####.#####.##.#####.####.#+",
"+#...##................##...#+",
"+###.##.##.########.##.##.###+",
"+###.##.##.########.##.##.###+",
"+#......##....##....##......#+",
"+#.##########.##.##########.#+",
"+#.##########.##.##########.#+",
"+#..........................#+",
"+############################+",
"+   Lives left:              +",
"+                            +",
"++++++++++++++++++++++++++++++"
	};
	for (int i = 0; i < setFieldX(); i++)
		for (int j = 0; j < setFieldY(); j++)
			field[i][j] = f[i][j];
}

int Field::countStars() const
{
	int counter = 0;
	for (int i = 0; i < setFieldX(); i++)
		for (int j = 0; j < setFieldY(); j++)
		{
			if (field[i][j] == '.')
				counter++;
		}
	return counter;
}

int Field::getFieldScore() const
{
	int stars = getMaxScore() / getScoreMultiplier();
	return (stars - (countStars()) * getScoreMultiplier());
}



Field::~Field()
{
}
