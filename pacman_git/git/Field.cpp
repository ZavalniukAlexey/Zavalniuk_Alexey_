#include "Field.hpp"
#include <iostream>
#include "Consts.hpp"
#include "BaseApp.hpp"

Field::Field()
{
	char f[31][29] = {
"############################",
"#............##............#",
"#.####.#####.##.#####.####.#",
"#.####.#####.##.#####.####.#",
"#.####.#####.##.#####.####.#",
"#..........................#",
"#.####.##.########.##.####.#",
"#.####.##.########.##.####.#",
"#......##....##....##......#",
"######.#####.##.#####.######",
"######.#####.##.#####.######",
"######.##          ##.######",
"######.## ######## ## ######",
"######.## #      # ##.######",
"      .   #      #   .      ",
"######.## #      # ##.######",
"######.## ######## ##.######",
"######.##          ##.######",
"######.##.########.##.######",
"######.##.########.##.######",
"#............##............#",
"#.####.#####.##.#####.####.#",
"#.####.#####.##.#####.####.#",
"#...##................##...#",
"###.##.##.########.##.##.###",
"###.##.##.########.##.##.###",
"#......##....##....##......#",
"#.##########.##.##########.#",
"#.##########.##.##########.#",
"#..........................#",
"############################"
	};
	for (int i = 0; i < 31; i++)
		for (int j = 0; j < 29; j++)
			 field[i][j] = f[i][j];
}


void Field::updateField(const int x, const int y, const char c)
{
	field[x][y] = c;
}
void Field::resetField()
{		char f[31][29] = {
		"############################", 
		"#............##............#", 
		"#.####.#####.##.#####.####.#", 
		"#.####.#####.##.#####.####.#", 
		"#.####.#####.##.#####.####.#", 
		"#..........................#", 
		"#.####.##.########.##.####.#", 
		"#.####.##.########.##.####.#",
		"#......##....##....##......#",	
		"######.#####.##.#####.######",	
		"######.#####.##.#####.######",	
		"######.##          ##.######",
		"######.## ######## ## ######",
		"######.## #      # ##.######",
		"      .   #      #   .      ",
		"######.## #      # ##.######", 
		"######.## ######## ##.######",	
		"######.##          ##.######",	
		"######.##.########.##.######",	
		"######.##.########.##.######",	
		"#............##............#",	
		"#.####.#####.##.#####.####.#", 
		"#.####.#####.##.#####.####.#",	
		"#...##................##...#",
		"###.##.##.########.##.##.###",	
		"###.##.##.########.##.##.###",
		"#......##....##....##......#",	
		"#.##########.##.##########.#",	
		"#.##########.##.##########.#",	
		"#..........................#",	
		"############################" 	
	};
for (int i = 0; i < getFieldY(); i++)
	for (int j = 0; j < getFieldX(); j++)
		 field[i][j] = f[i][j];
}

int Field::countStars() const
{
	int counter = 0;
	for (int i = 0; i < getFieldY(); i++)
		for (int j = 0; j < getFieldX(); j++)
		{
			if ( field[i][j] == '.')
			counter++;
		}
	return counter;
}

int Field::getFieldScore() const
{
	Field temp;
	int stars = temp.countStars();
	int fieldScore = (stars - ( countStars())) * getScoreMultiplier();
	return fieldScore;
}

char Field::getFieldChar(const  int i, const int j)
{
	return field[i][j];
}

void Field::setFieldChar(const int i, const int j, const  char s)
{
	field[i][j] = s;
}

Field::~Field()
{
}
